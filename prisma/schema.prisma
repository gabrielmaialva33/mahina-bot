// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Bot {
  botId         String @id @map("_id")
  totalPlaySong Int
}

model Guild {
  guildId  String    @id @map("_id")
  prefix   String
  language String?   @default("PortugueseBR")
  stay     Stay?
  dj       Dj?
  roles    Role[]
  setup    Setup?
  aiConfig AIConfig?
}

model Stay {
  guildId String @id @map("_id")
  textId  String
  voiceId String
  Guild   Guild  @relation(fields: [guildId], references: [guildId])
}

model Dj {
  guildId String  @id @map("_id")
  mode    Boolean
  Guild   Guild   @relation(fields: [guildId], references: [guildId])
}

model Role {
  guildId String @id @map("_id")
  roleId  String
  Guild   Guild  @relation(fields: [guildId], references: [guildId])

  @@unique([guildId, roleId])
}

model Playlist {
  id     String  @id @default(uuid()) @map("_id")
  userId String
  name   String
  tracks String? // Store the array of encoded tracks as a JSON string

  @@unique([userId, name])
}

model Setup {
  guildId   String @id @map("_id")
  textId    String
  messageId String
  Guild     Guild  @relation(fields: [guildId], references: [guildId])
}

model ChatHistory {
  id         String   @id @default(uuid()) @map("_id")
  userId     String
  guildId    String
  channelId  String
  messages   Json     // Array of {role, content, timestamp}
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@index([userId, guildId])
  @@index([channelId])
}

model AIConfig {
  guildId            String   @id @map("_id")
  enabled            Boolean  @default(true)
  defaultPersonality String   @default("friendly")
  rateLimit          Int      @default(10)
  maxHistory         Int      @default(30)
  contextWindow      Int      @default(10)
  allowedChannels    String[] @default([]) // Empty means all channels
  blockedUsers       String[] @default([])
  customPrompts      Json?    // Custom prompts per guild
  stats              Json?    // Usage statistics
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  Guild Guild @relation(fields: [guildId], references: [guildId])
}

model PersonalityAnalysis {
  id           String   @id @default(uuid()) @map("_id")
  userId       String
  guildId      String
  animalKey    String   // Key do animal espiritual
  animalData   Json     // Dados completos do animal
  userStats    Json     // Estatísticas do usuário no momento da análise
  qValue       Float    // Valor Q da análise (para RL)
  createdAt    DateTime @default(now())
  
  @@index([userId, guildId])
  @@index([createdAt])
}

model RLQTable {
  id       String   @id @default(uuid()) @map("_id")
  state    String   // Estado codificado
  action   String   // Ação (animal key)
  value    Float    // Q-value
  visits   Int      @default(1)
  updatedAt DateTime @updatedAt
  
  @@unique([state, action])
  @@index([state])
}
